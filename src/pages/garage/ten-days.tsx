import { HeadFC, navigate } from 'gatsby'
import * as React from 'react'
import { Header } from '../../components/header'
import { useState, useEffect, useRef, useMemo } from 'react'
import { YahooChartRow, queryChart } from '../../utils/yahoo'
import { createChart, LineSeries, UTCTimestamp } from 'lightweight-charts'
import { currency } from '../../utils/formatters'

const TenDays: React.FC = () => {
  const ref = useRef<HTMLDivElement>(null)
  const [data, setData] = useState<YahooChartRow[]>([])
  const [symbol, setSymbol] = useState('AAPL')
  const [days, setDays] = useState(10)
  const [period, setPeriod] = useState('10')

  useEffect(() => {
    queryChart(symbol, new Date('2000-01-01'), new Date(new Date().setHours(0, 0, 0, 0))).then((data) => {
      setData(data.sort((a, b) => a.date.getTime() - b.date.getTime()))
    })
  }, [symbol])

  const filtered = useMemo(() => {
    if (data.length === 0) {
      return []
    }
    const years = parseInt(period || '10')
    return data.slice(data.length - years * 252).map((d) => ({
      time: (d.date.getTime() / 1000) as UTCTimestamp,
      value: d.close,
    }))
  }, [data, period])

  const dailyReturns = useMemo(() => {
    if (!filtered.length) {
      return []
    }
    const items: Array<{ time: UTCTimestamp; value: number }> = []
    for (let i = 1; i < filtered.length; i++) {
      const prev = filtered[i - 1]
      const curr = filtered[i]
      items.push({
        time: curr.time,
        value: (curr.value - prev.value) / prev.value,
      })
    }
    return items
  }, [filtered])

  const bestDays = useMemo(() => {
    return dailyReturns
      .slice(0)
      .sort((a, b) => b.value - a.value)
      .slice(0, days)
  }, [dailyReturns, days])

  const worstDays = useMemo(() => {
    return dailyReturns
      .slice(0)
      .sort((a, b) => a.value - b.value)
      .slice(0, days)
  }, [dailyReturns, days])

  const randomDays = useMemo(() => {
    return dailyReturns
      .slice(0)
      .sort(() => Math.random() - 0.5)
      .slice(0, days)
  }, [dailyReturns, days])

  const dailyReturnsWithoutBestDays = useMemo(() => {
    const dates = bestDays.map((d) => d.time)
    return dailyReturns.filter((d) => !dates.includes(d.time))
  }, [dailyReturns, bestDays])

  const dailyReturnsWithoutWorstDays = useMemo(() => {
    const dates = worstDays.map((d) => d.time)
    return dailyReturns.filter((d) => !dates.includes(d.time))
  }, [dailyReturns, worstDays])

  const dailyReturnsWithoutRandomDays = useMemo(() => {
    const dates = randomDays.map((d) => d.time)
    return dailyReturns.filter((d) => !dates.includes(d.time))
  }, [dailyReturns, randomDays])

  const cumulative = (dailyReturns: Array<{ time: UTCTimestamp; value: number }>) => {
    if (!dailyReturns.length) {
      return []
    }
    const items: Array<{ time: UTCTimestamp; value: number }> = []
    for (let i = 0; i < dailyReturns.length; i++) {
      const prev = i == 0 ? 1 : items[i - 1].value
      const curr = dailyReturns[i].value
      items.push({
        time: dailyReturns[i].time,
        value: prev * (1 + curr),
      })
    }
    return items.map((d) => ({ time: d.time, value: d.value - 1 }))
  }

  const cumulativeDailyReturns = useMemo(() => {
    return cumulative(dailyReturns)
  }, [dailyReturns])

  const cumulativeDailyReturnsWithoutBestDays = useMemo(() => {
    return cumulative(dailyReturnsWithoutBestDays)
  }, [dailyReturnsWithoutBestDays])

  const cumulativeDailyReturnsWithoutWorstDays = useMemo(() => {
    return cumulative(dailyReturnsWithoutWorstDays)
  }, [dailyReturnsWithoutWorstDays])

  const cumulativeDailyReturnsWithoutRandomDays = useMemo(() => {
    return cumulative(dailyReturnsWithoutRandomDays)
  }, [dailyReturnsWithoutRandomDays])

  useEffect(() => {
    if (!ref || !ref.current || !dailyReturns.length) {
      return
    }

    const chart = createChart(ref.current, {
      width: ref.current.clientWidth,
      height: 300,
    })

    const cumulativeDailyReturnsSeries = chart.addSeries(LineSeries, { color: 'black', title: symbol, priceFormat: { type: 'percent' } })
    cumulativeDailyReturnsSeries.setData(cumulativeDailyReturns)

    const cumulativeDailyReturnsWithoutBestDaysSeries = chart.addSeries(LineSeries, { color: 'red', title: `Without ${days} Best Days`, priceFormat: { type: 'percent' } })
    cumulativeDailyReturnsWithoutBestDaysSeries.setData(cumulativeDailyReturnsWithoutBestDays)

    const cumulativeDailyReturnsWithoutWorstDaysSeries = chart.addSeries(LineSeries, { color: 'green', title: `Without ${days} Worst Days`, priceFormat: { type: 'percent' } })
    cumulativeDailyReturnsWithoutWorstDaysSeries.setData(cumulativeDailyReturnsWithoutWorstDays)

    const cumulativeDailyReturnsWithoutRandomDaysSeries = chart.addSeries(LineSeries, { color: 'orange', title: `Without ${days} Random Days`, priceFormat: { type: 'percent' } })
    cumulativeDailyReturnsWithoutRandomDaysSeries.setData(cumulativeDailyReturnsWithoutRandomDays)

    chart.timeScale().fitContent()

    chart.applyOptions({
      localization: {
        priceFormatter: Intl.NumberFormat(undefined, { style: 'percent' }).format,
      },
    })

    return () => {
      chart.remove()
    }
  }, [ref, cumulativeDailyReturns, cumulativeDailyReturnsWithoutBestDays, cumulativeDailyReturnsWithoutWorstDays, cumulativeDailyReturnsWithoutRandomDays])

  return (
    <main>
      <Header />


      <div className="container mx-auto my-0 p-4">
        <h2 className='text-2xl font-bold mb-3'>Ten Days üìà</h2>
        <p className='mb-3'>–Ø–∫—â–æ –≤–∏ —Ö–æ—á —ñ–Ω–∫–æ–ª–∏ –¥—É–º–∞–ª–∏ –ø—Ä–æ —Ç–µ —â–æ–± –≤–∏—á–µ–∫–∞—Ç–∏ –±—ñ–ª—å—à –≥–∞—Ä–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –≤—Ö–æ–¥—É, –∞–±–æ –ø—Ä–æ —Ç–µ —â–æ–± –≤–∏–π—Ç–∏ –∑ —Ä–∏–Ω–∫—É –Ω–∞ –¥–µ—è–∫–∏–π —á–∞—Å - —Ü—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å–∞–º–µ –¥–ª—è –≤–∞—Å.</p>
        <p className='mb-3'>–í–ª–∞—Å–Ω–µ —Ä–æ–±–∏–ª–æ—Å—è –ø–æ –≥–∞—Ä—è—á–∏–º —Å–ª—ñ–¥–∞–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:</p>
        <blockquote className="px-5 py-3 text-neutral-500">
          <p className='mb-3'>–î–æ–±—Ä–∏–π –¥–µ–Ω—å. –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ —á–∞–π–Ω–∏–∫–∞: –ø–æ—è—Å–Ω—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —Ç–µ–∑—É, —á–æ–º—É —Ç–∞–∫?</p>
          <p className='mb-3'>"–ø—Ä–æ—Ç—è–≥–æ–º 10 —Ä–æ–∫—ñ–≤ —î –Ω–∞–π–∫—Ä—É—Ç—ñ—à—ñ —É–º–æ–≤–Ω—ñ 10 –¥–Ω—ñ–≤.</p>
          <p className='mb-3'>—è–∫—â–æ –≤ –Ω–∏—Ö –Ω–µ –ø–æ–ø–∞—Å—Ç–∏, —Ç–æ –±—É–¥–µ —É–º–æ–≤–Ω–æ 7% —Ä—ñ—á–Ω–∏—Ö, —è–∫—â–æ –ø–æ–ø–∞—Å—Ç–∏ - —Ç–æ –±—É–¥–µ 10% —Ä—ñ—á–Ω–∏—Ö."</p>
          <p>
            —è –Ω–µ –¥—É–∂–µ —Ä–æ–∑—É–º—ñ—é –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫ —á–æ–≥–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Ç–∞–∫–∏–π –≤–µ–ª–∏–∫–∏–π –ø—Ä–∏—Ä—ñ—Å—Ç –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –ª–∏—à–µ –∑–∞ 10 —Ä–æ–∫—ñ–≤? –∞–¥–∂–µ —è–∫—â–æ –Ω–∞—Å —É–º–æ–≤–Ω–æ –∫–∞–∂—É—á–∏ —Ü—ñ–∫–∞–≤–∏—Ç—å –ø—Ä–∏—Ä–æ—Å—Ç –∫–∞–ø—ñ—Ç–∞–ª—É (—Ç–æ–±—Ç–æ —Ç.–ê —ñ —Ç.–ë) —ñ —Ç–µ —â–æ
            –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–µ–Ω—ñ –º—ñ–∂ —Ü–∏–º–∏ —Ç–æ—á–∫–∞–º–∏- –Ω–µ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è.
          </p>
        </blockquote>

        <p className='mb-3'>–£ —Ü—ñ–π —Å–∏–º—É–ª—è—Ü—ñ—ó –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ —â–æ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —è–∫—â–æ –≤–∏ "–ø—Ä–æ–≥—É–ª—è—î—Ç–µ" –ø º—è—Ç—å –¥–Ω—ñ–≤ —ñ —è–∫ —Ü–µ –≤–ø–ª–∏–Ω–µ –Ω–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</p>

        <div className="my-5">
          <div className="grid grid-cols-3 gap-4">
            <div>
              <div className='mb-2'>–ê–∫—Ü—ñ—è</div>
              <input className="block w-full px-3 py-2 border border-gray-300 rounded bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" type="text" value={symbol} onChange={(e) => setSymbol(e.target.value)} />
            </div>
            <div>
              <div className='mb-2'>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</div>
              <input className="block w-full px-3 py-2 border border-gray-300 rounded bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" type="number" min="1" max="99" value={days} onChange={(e) => setDays(e.target.valueAsNumber)} />
            </div>
            <div>
              <div className='mb-2'>–ü–µ—Ä—ñ–æ–¥</div>
              <select className="block w-full px-3 py-2 border border-gray-300 rounded bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" onChange={(e) => setPeriod(e.target.value)}>
                <option value="10">10 —Ä–æ–∫—ñ–≤</option>
                <option value="5">5 —Ä–æ–∫—ñ–≤</option>
                <option value="3">3 —Ä–æ–∫—ñ–≤</option>
                <option value="2">2 —Ä–æ–∫—ñ–≤</option>
                <option value="1">1 —Ä–æ–∫—ñ–≤</option>
              </select>
            </div>
          </div>
        </div>

        <div className="my-5">
          <div ref={ref} style={{ height: '300px' }} />
        </div>

        <div className="my-5">
          <p className='mb-3'>–î—É–∂–µ —Ü—ñ–∫–∞–≤–æ, –¥—ñ–π—Å–Ω–æ, –ª–∏—à–µ –Ω–µ–¥—ñ–ª—è-–¥–≤—ñ —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏. –ê–ª–µ —â–µ —Ü—ñ–∫–∞–≤—ñ—à–µ —Ç–µ —è–∫ –ø—Ä–∞—Ü—é—î –∑–≤–æ—Ä–æ—Ç–Ω—î –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø—É—Å–∫–æ–º –Ω–∞–π–≥—ñ—Ä—à–∏—Ö –¥–Ω—ñ–≤.</p>
          <p>
            <b>–í–ê–ñ–õ–ò–í–û</b> —Ä–æ–∑—É–º—ñ—Ç–∏ —â–æ —É —Ü—å–æ–º—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–∏ —Ä–∞—Ö—É—î–º–æ —Ç—Ä–æ—Ö–∏ –Ω–µ –∑–≤–∏—á–Ω–∏–π –Ω–∞–º —Ñ–æ—Ä–º–∞—Ç - —Ü–µ —â–æ—Å—å –±–ª–∏–∑—å–∫–µ –¥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥—É —Ç–∞ –≤–∏—Ö–æ–¥—É –∑ —Ä–∏–Ω–∫—É, —è–∫—â–æ –± –º–∏ —Ä–∞—Ö—É–≤–∞–ª–∏ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ
            –¥–Ω—è - —Ç–æ —Ç–∞–º –Ω—ñ—á–æ–≥–æ –æ—Å–æ–±–ª–∏–≤–æ–≥–æ –±–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –∞–¥–∂–µ –¥—ñ–π—Å–Ω–æ, –∫—É–ø–∏–≤—à–∏ –∞–∫—Ü—ñ—é –¥–µ—Å—è—Ç—å —Ä–æ–∫—ñ–≤ —Ç–æ–º—É –∑–∞ $20 —ñ –ø—Ä–æ–¥–∞–≤—à–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞ $200 - –º–∞—î–º–æ –ø—Ä–∏–±—É—Ç–æ–∫ –≤ 900%, —è–∫—â–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü—å–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –º—ñ
            –≤–∏–π–¥–µ–º–æ –≤ –æ–¥–∏–Ω –∑ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –¥–Ω—ñ–≤ —Ç–æ —Ñ–∞–∫—Ç–∏—á–Ω–æ –≤—Ç—Ä–∞—Ç–∏–º–æ –π–æ–≥–æ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –≤—ñ–¥ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Å—É–º–∏, –∞–ª–µ –º–∞–ª—é–≤–∞—Ç–∏ —Ç–∞–∫–µ –±—É–¥–µ –¥—É–∂–µ –Ω–µ –Ω–∞–≥–ª—è–¥–Ω–æ –∞–¥–∂–µ –ª—ñ–Ω—ñ—ó –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫—É –±—É–¥—É—Ç –¥—É–∂–µ –±–ª–∏–∑—å–∫–æ
          </p>
        </div>

        <div className="my-5">
          <h2 className='text-2xl font-bold mb-3'>–Ø–∫ —Ü–µ —Ä–∞—Ö—É—î—Ç—å—Å—è</h2>
          <p className='mb-3'>–°–ø–æ—á–∞—Ç–∫—É –∑–∞–±–∏—Ä–∞—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω–Ω—ñ –∑ Yahoo Finance</p>
          <p className='mb-3'>
            <a className='text-blue-500' href={`https://finance.yahoo.com/quote/{symbol}/history/`} target="_blank">
              https://finance.yahoo.com/quote/{symbol}/history/
            </a>
          </p>
          <p className="mb-3 text-neutral-500">
            –ü—Ä–∏–º—ñ—Ç–∫–∞: –¥–ª—è GoogleSheets –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ <code>=GOOGLEFINANCE("{symbol}", "price", "1990-01-01", TODAY(), "DAILY")</code>
          </p>
          <p className='mb-3'>–î–∞–ª—ñ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ü—ñ –¥–∞–Ω–Ω—ñ, –∑–∞–ª–∏—à–∞—é—á—ñ {period} –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ä–æ–∫—ñ–≤</p>
          <p className="mb-3 text-neutral-500">–ü—Ä–∏–º—ñ—Ç–∫–∞: —Ç—É—Ç –ª–∏—à–µ —Ä–∞–±–æ—á—ñ –¥–Ω—ñ, –æ—Ç–∂–µ –≤ —Ä–æ—Ü—ñ 252 –¥–Ω—è, —Ç–æ–±–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—ñ {parseInt(period || '10') * 252} –¥–Ω—ñ–≤</p>

          <table className="table-auto my-5">
            <thead>
              <tr>
                <th className='p-2 border border-neutral-200 text-left'>day</th>
                <th className='p-2 border border-neutral-200 text-left'>date</th>
                <th className='p-2 border border-neutral-200 text-left'>price</th>
              </tr>
            </thead>
            <tbody>
              {filtered.slice(0, 3).map((d, i) => (
                <tr key={i}>
                  <td className='p-2 border border-neutral-200 text-left'>{i + 1}</td>
                  <td className='p-2 border border-neutral-200 text-left'>{new Date(d.time * 1000).toISOString().split('T').shift()}</td>
                  <td className='p-2 border border-neutral-200 text-left'>{currency(d.value)}</td>
                </tr>
              ))}
              <tr>
                <td className='p-2 border border-neutral-200 text-center' colSpan={3}>&hellip;</td>
              </tr>
              {filtered.slice(filtered.length - 3).map((d, i) => (
                <tr key={i}>
                  <td className='p-2 border border-neutral-200 text-left'>{filtered.findIndex((x) => x.time === d.time) + 1}</td>
                  <td className='p-2 border border-neutral-200 text-left'>{new Date(d.time * 1000).toISOString().split('T').shift()}</td>
                  <td className='p-2 border border-neutral-200 text-left'>{currency(d.value)}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <p className='mb-3'>
            –ú–∞—é—á—ñ —Ü—ñ –¥–∞–Ω–Ω—ñ, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —â–æ–¥–µ–Ω–Ω—É –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é <code>(curr-prev)/prev</code>
          </p>
          <p className="mb-3 text-neutral-500">–ü—Ä–∏–º—ñ—Ç–∫–∞: —Ç—É—Ç –≤ –Ω–∞—Å –≤–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –º–µ–Ω—à–µ, –∞–¥–∂–µ –Ω–µ –∑–º–æ–∂–µ–º–æ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø–µ—Ä—à–æ–≥–æ –¥–Ω—è</p>

          <table className="table-auto my-5">
            <thead>
              <tr>
                <th className='p-2 border border-neutral-200 text-left'>day</th>
                <th className='p-2 border border-neutral-200 text-left'>date</th>
                <th className='p-2 border border-neutral-200 text-left'>prev</th>
                <th className='p-2 border border-neutral-200 text-left'>curr</th>
                <th className='p-2 border border-neutral-200 text-left'>(curr-prev)/prev</th>
              </tr>
            </thead>
            <tbody>
              {dailyReturns
                .slice(0, 3)
                .map((d, i) => ({
                  ...d,
                  date: new Date(d.time * 1000).toISOString().split('T').shift(),
                  curr: filtered.find((x) => x.time === d.time)?.value || 0,
                  prev: filtered[filtered.findIndex((x) => x.time === d.time) - 1]?.value || 0,
                  perc: 100 * d.value,
                }))
                .map((d, i) => (
                  <tr key={i}>
                    <td className='p-2 border border-neutral-200 text-left'>{i + 1}</td>
                    <td className='p-2 border border-neutral-200 text-left'>{d.date}</td>
                    <td className='p-2 border border-neutral-200 text-left'>{currency(d.prev)}</td>
                    <td className='p-2 border border-neutral-200 text-left'>{currency(d.curr)}</td>
                    <td className='p-2 border border-neutral-200 text-left'>{currency(d.perc)}%</td>
                  </tr>
                ))}
              <tr>
                <td className='p-2 border border-neutral-200 text-center' colSpan={5}>&hellip;</td>
              </tr>
              {dailyReturns
                .slice(dailyReturns.length - 3)
                .map((d, i) => ({
                  ...d,
                  date: new Date(d.time * 1000).toISOString().split('T').shift(),
                  curr: filtered.find((x) => x.time === d.time)?.value || 0,
                  prev: filtered[filtered.findIndex((x) => x.time === d.time) - 1]?.value || 0,
                  perc: 100 * d.value,
                }))
                .map((d, i) => (
                  <tr key={i}>
                    <td className='p-2 border border-neutral-200 text-left'>{d.date}</td>
                    <td className='p-2 border border-neutral-200 text-left'>{new Date(d.time * 1000).toISOString().split('T').shift()}</td>
                    <td className='p-2 border border-neutral-200 text-left'>{currency(d.prev)}</td>
                    <td className='p-2 border border-neutral-200 text-left'>{currency(d.curr)}</td>
                    <td className='p-2 border border-neutral-200 text-left'>{currency(d.perc)}%</td>
                  </tr>
                ))}
            </tbody>
          </table>

          <p className='mb-3'>
            –ú–∞—é—á–∏ —â–æ–¥–µ–Ω–Ω—ñ –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –∑–Ω–∞—Ö–æ–¥–∏–º–æ {days} –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Ç–∞ –Ω–∞–π–≥—ñ—Ä—à–∏—Ö –¥–Ω—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –∑–∞ –¥–ª—è –∑–∞–±–∞–≤–∏ –±–µ—Ä–µ–º–æ {days} –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–Ω—ñ–≤
          </p>

          <div className="flex gap-4 my-5">
            <div>
              <p className="text-center">
                <b>–ù–∞–π–∫—Ä–∞—â—ñ –¥–Ω—ñ</b>
              </p>
              <table className="table-auto">
                <thead>
                  <tr>
                    <th className='p-2 border border-neutral-200 text-left'>–î–∞—Ç–∞</th>
                    <th className='p-2 border border-neutral-200 text-left'>–î–æ—Ö—ñ–¥</th>
                  </tr>
                </thead>
                <tbody>
                  {bestDays.map((d, i) => (
                    <tr key={i}>
                      <td className='p-2 border border-neutral-200 text-left'>{new Date(d.time * 1000).toISOString().split('T').shift()}</td>
                      <td className='p-2 border border-neutral-200 text-left'>{(d.value * 100).toFixed(2)}%</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div>
              <p className="text-center">
                <b>–ù–∞–π–≥—ñ—Ä—à—ñ –¥–Ω—ñ</b>
              </p>
              <table className="table-auto">
                <thead>
                  <tr>
                    <th className='p-2 border border-neutral-200 text-left'>–î–∞—Ç–∞</th>
                    <th className='p-2 border border-neutral-200 text-left'>–î–æ—Ö—ñ–¥</th>
                  </tr>
                </thead>
                <tbody>
                  {worstDays.map((d, i) => (
                    <tr key={i}>
                      <td className='p-2 border border-neutral-200 text-left'>{new Date(d.time * 1000).toISOString().split('T').shift()}</td>
                      <td className='p-2 border border-neutral-200 text-left'>{(d.value * 100).toFixed(2)}%</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div>
              <p className="text-center">
                <b>–í–∏–ø–∞–¥–∫–æ–≤—ñ –¥–Ω—ñ</b>
              </p>
              <table className="table-auto">
                <thead>
                  <tr>
                    <th className='p-2 border border-neutral-200 text-left'>–î–∞—Ç–∞</th>
                    <th className='p-2 border border-neutral-200 text-left'>–î–æ—Ö—ñ–¥</th>
                  </tr>
                </thead>
                <tbody>
                  {randomDays.map((d, i) => (
                    <tr key={i}>
                      <td className='p-2 border border-neutral-200 text-left'>{new Date(d.time * 1000).toISOString().split('T').shift()}</td>
                      <td className='p-2 border border-neutral-200 text-left'>{(d.value * 100).toFixed(2)}%</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
          <p className='mb-3'>–ú–∞—é—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –¥–Ω—ñ –º–æ–∂–µ–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Ç–∞ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—á–∫–∏ –∑:</p>
          <ul className='list-disc list-inside ml-5 my-3'>
            <li>—â–æ–¥–µ–Ω–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å</li>
            <li>—â–æ–¥–µ–Ω–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –±–µ–∑ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –¥–Ω—ñ–≤</li>
            <li>—â–æ–¥–µ–Ω–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –±–µ–∑ –Ω–∞–π–≥—ñ—Ä—à–∏—Ö –¥–Ω—ñ–≤</li>
            <li>—â–æ–¥–µ–Ω–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –±–µ–∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–Ω—ñ–≤</li>
          </ul>
          <p className='mb-3'>–ê —Ç–∞–∫–æ–∂ —ó—Ö–Ω—ñ –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ñ –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ</p>
          <p className='mb-3'>
            –ó–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ—ó –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–æ—Ä–º—É–ª—É: <code>prev*(1+curr)</code>
          </p>
          <p className='mb-3'>–û—Å—å –ø—Ä–∏–∫–ª–∞–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ—ó –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ:</p>
          <p className="mb-3 text-neutral-500">–ü—Ä–∏–º—ñ—Ç–∫–∞: —Ä–æ–±–∏–º–æ —Ç–µ–∂ —Å–∞–º–µ –¥–ª—è —Ç–∞–±–ª–∏—á–æ–∫ –±–µ–∑ –Ω–∞–π—Ä–∞—â–∏—Ö, –Ω–∞–π–≥—ñ—Ä—à–∏—Ö —Ç–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–Ω—ñ–≤</p>
          <table className="table-auto">
            <thead>
              <tr>
                <th className='p-2 border border-neutral-200 text-left'>day</th>
                <th className='p-2 border border-neutral-200 text-left'>date</th>
                <th className='p-2 border border-neutral-200 text-left'>price</th>
                <th className='p-2 border border-neutral-200 text-left'>daily returns</th>
                <th className='p-2 border border-neutral-200 text-left'>cumulative returns</th>
              </tr>
            </thead>
            <tbody>
              {cumulativeDailyReturns.slice(0, 5).map((d, i) => (
                <tr key={i}>
                  <td className='p-2 border border-neutral-200 text-left'>{i + 1}</td>
                  <td className='p-2 border border-neutral-200 text-left'>{new Date(d.time * 1000).toISOString().split('T').shift()}</td>
                  <td className='p-2 border border-neutral-200 text-left'>${currency(filtered.find((x) => x.time === d.time)?.value || 0)}</td>
                  <td className='p-2 border border-neutral-200 text-left'>{currency(100 * (dailyReturns.find((x) => x.time === d.time)?.value || 0))}%</td>
                  <td className='p-2 border border-neutral-200 text-left'>{(d.value * 100).toFixed(2)}%</td>
                </tr>
              ))}
              <tr>
                <td className='p-2 border border-neutral-200 text-center' colSpan={5}>&hellip;</td>
              </tr>
              {cumulativeDailyReturns.slice(cumulativeDailyReturns.length - 5).map((d, i) => (
                <tr key={i}>
                  <td className='p-2 border border-neutral-200 text-left'>{cumulativeDailyReturns.findIndex((x) => x.time === d.time) + 1}</td>
                  <td className='p-2 border border-neutral-200 text-left'>{new Date(d.time * 1000).toISOString().split('T').shift()}</td>
                  <td className='p-2 border border-neutral-200 text-left'>${currency(filtered.find((x) => x.time === d.time)?.value || 0)}</td>
                  <td className='p-2 border border-neutral-200 text-left'>{currency(100 * (dailyReturns.find((x) => x.time === d.time)?.value || 0))}%</td>
                  <td className='p-2 border border-neutral-200 text-left'>{(d.value * 100).toFixed(2)}%</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>



    </main>
  )
}

export default TenDays
export const Head: HeadFC = () => <title>Ten Days</title>
